1. Never assume your code is doing what you think it's doing
2. Never assume your input is clean
3. Never assume you will come back to this code
4. Never assume that the user will be limited to the logical and sensible
5. Never assume that your one-off script will stay a one-off script
6. On second thought, never assume anything
7. Read the dang error message


Other quotes:
- Humans are hard. Turns out programming involves them. ~Ash
- Some things are worth being prescriptive about. ~Ben G
- Speak to the needs and less to the "history". ~Daniel
- Too much planning and discussion is possible. ~Duck
- Don't be so focused on the immediate problem that we forget the original one. ~me
- Recapping decisions isn't necessarily an opportunity to readjudicate. ~Quinn
- Only try to architect for ~10x from where you currently are. You don't know the bottlenecks you'll hit beyond that. ~Ben G
- Quality is important, perfection is not. ~Quinn
- (frequent retros) Small nudges to keep things from going off the rails rather than a retro after weâ€™ve launched ourselves off the tracks ~Kelsey B
- Users cannot always be stopped from trying to do odd things but this will at least set their expectation. ~Duck
- [During a refactor,] support existing bugs. ~Easterday
- sometimes we don't choose the rabbit hole, sometimes it chooses us ~Melton
- If you don't set your own expectations, then the customer gets to set them for you. ~Mike D
- Knowledge you gain by walking through fire is knowledge you keep. ~Dharma
- Any carrot long enough is a stick. ~Gleeco

Addendum: If you are reviewing my code, then you are my last line of defense against mistakes. If you are trying to be nice with my PR, then I cannot trust you to be that defense.

