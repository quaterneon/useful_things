# General Coding & Debugging Rules
1. Never assume your code is doing what you think it's doing
2. Never assume your input is clean
3. Never assume you will come back to this code
4. Never assume that the user will be limited to the logical and sensible
5. Never assume that your one-off script will stay a one-off script
6. On second thought, never assume anything
7. You're going to have to debug this code at 3am when sleep deprived, so make it future-you-proof
8. Don't underestimate battle-tested code
9. Read the dang error message


# Useful Quotes
- Humans are hard. Turns out programming involves them. ~Ash
- Some things are worth being prescriptive about. ~Ben G
- Speak to the needs and less to the "history". ~Daniel
- Too much planning and discussion is possible. ~Duck
- Don't be so focused on the immediate problem that we forget the original one. ~me
- Recapping decisions isn't necessarily an opportunity to readjudicate. ~Quinn
- Only try to architect for ~10x from where you currently are. You don't know the bottlenecks you'll hit beyond that. ~Ben G
- Quality is important, perfection is not. ~Quinn
- (frequent retros) Small nudges to keep things from going off the rails rather than a retro after weâ€™ve launched ourselves off the tracks ~Kelsey B
- Users cannot always be stopped from trying to do odd things but this will at least set their expectation. ~Duck
- [During a refactor,] support existing bugs. ~Easterday
- sometimes we don't choose the rabbit hole, sometimes it chooses us ~Melton
- If you don't set your own expectations, then the customer gets to set them for you. ~Mike D
- Knowledge you gain by walking through fire is knowledge you keep. ~Dharma
- Any carrot long enough is a stick. ~Gleeco
- Stop being clever and start being effective. ~Chris C
- Simplicity does not always equal one system. ~Chris C
- Every question you ask, every comment you leave - it's like adding a weight or cost to that person. You have given them something to do/made a demand of their time. ~Clev
- Many eyes can make a bug shallow. ~Gleeco

# MRs
If you are reviewing my code, then you are my last line of defense against mistakes. If you are trying to be nice with my PR, then I cannot trust you to be that defense.

# Architecture
- Don't be clever
- Never use Postgres as a queue, and never ever use Postgres as a streaming queue
- Make sure decisions are made in the right place

# Documents
- Most important question of any document: why am I writing this document? What do I want to accomplish?
- Be mindful of your audience
- Stop putting clauses in sentences. More simple sentences is better than many complex sentences.
- Whitespace helps make documents readable
- Write an ombibus document first that you never share with anyone. This gets the clutter out of your brain.
- Write many, short, targeted documents

# Strategy/Planning
- Pick your battles
- Yes, most of your time will be spent stating the obvious. 
- Always check your assumptions
- Understand what knowledge people are starting with that led to their assumptions/conclusions
- The right question at the right time can move a mountain. To maximize the chances of hitting that moment, always ask questions, no matter how obvious they seem.
- Be mindful of the cost of questions/comments - it's a demand of someone's time
- Sometimes the best questions are the obvious ones



